#!/bin/sh
## shellnote is a shell script that enables quick command line note taking.
## Written by Martin Gustavsson, released under GPLv3 license.

## source config file
if [ -e $HOME/.shellnoterc ]; then 
	source $HOME/.shellnoterc
else
	source ./.shellnoterc
fi

## check if editor env var exists, otherwise set to vim
EDITOR_=${EDITOR:-vim}

## create entry log file if it doesn't exist
if [ ! -e $LOG_DIR/$LOG_FILE ]; then
	> $LOG_DIR/$LOG_FILE
fi

## entry log file path
LOG_PATH="$LOG_DIR/$LOG_FILE"

## help function
help() {
	printf '%b\n' "shellnote: easy note-taking on the command line.\n\nUse:\n\tshellnote -a \"This is a note.\"\n\nOptions:\n -a\t\tAdd a new entry\n -e\t\tEdit current entries in your text editor\n -d\t\tDelete last entry\n -h\t\tPrint this help\n -p\t\tPrint entries\n -s\t\tSearch entries (supports regex)\n"
}

## create timestamp
DATE=`date +$DATE_FORMAT`
TIME=`date +$TIME_FORMAT`
DATETIME="$DATE\t$TIME"

while getopts ":a:s:dehp" OPT ; do
	case $OPT in
		a)
		## add entry
		ENTRY="$DATETIME\t$OPTARG"
		printf '%b\n' "$ENTRY" >> $LOG_PATH
		if [ "$CONFIRM_MSG" = true ]; then
			echo "Added entry to $LOG_PATH."
		fi ;;

		s)
		## search entry log file
		printf "%b" "Search result for \"$OPTARG\":\n\n"
		awk -v STR="$OPTARG" -F '\t' '{if ($3 ~ STR) print $1" "$2"  "$3;}' $LOG_PATH ;;
		d)
		## delete last line in entry log file
		LAST_ENTRY=`tail -n 1 $LOG_PATH | awk -F '\t' '{print $3}'`
		read -p "Delete entry '$LAST_ENTRY'? [Y/n] " yn
		case $yn in
			[Yy]* )	sed -i '$d' $LOG_PATH ;;
			[Nn]* ) break ;;
			* ) sed -i '$d' $LOG_PATH ;;
		esac ;;

		e)
		## edit entry log with text editor
		$EDITOR_ $LOG_PATH ;;

		h)
		## print help
		help ;;
		
		p)
		## print entries
		if [ ADD_SPACE = true ] ; then
			## print last N entries with spaces
			awk -F '\t' '{print $1" "$2"  "$3}' $LOG_PATH | tail -n $N_ENTRIES | pr -td
		else
			## print last N entries
			awk -F '\t' '{print $1" "$2"  "$3}' $LOG_PATH | tail -n $N_ENTRIES 
		fi
		;;

		\?)
		## print if unknown option supplied
		echo "Invalid option: -$OPTARG\n" 
		help
		exit 1 ;;

		:)
		## print if no option arguments supplied
		echo "Option -$OPTARG requires an argument."
		exit 1 ;;
	esac
done
