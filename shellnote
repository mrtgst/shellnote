#!/bin/sh
## shellnote is a shell script that enables quick command line note taking.
## Written by Martin Gustavsson, released under GPLv3 license.
VERSION="1.3.2"

# source config file
if [ -e "$HOME/.shellnote" ]; then 
	. "$HOME/.shellnote"
elif [ -e /etc/shellnote.conf ]; then 
	. /etc/shellnote.conf
else
	. ./shellnote.conf
fi

# create entry path from config variables
ENTRY_PATH="$ENTRY_DIR/$ENTRY_FILE"

# check if editor env variable exists, otherwise set to vim
EDITOR_=${EDITOR:-vim}

# define functions
help() {
	echo "shellnote: easy note-taking on the command line. Version: $VERSION"
	echo ""
	echo "Use:"
	echo "	shellnote -a \"This is a note.\""
	echo "Options:"
	echo "	-a		Add a new entry"
	echo "	-b		Create backup of current entries"
	echo "	-e		Edit current entries in your text editor"
	echo "	-d		Delete last entry"
	echo "	-h		Print this help"
	echo "	-p		Print entries"
	echo "	-s		Search entries (supports regex)"
}

create_entry_dir() {
	# creates entry directory if it doesn't exist
	if ! [ -d "$ENTRY_DIR" ]; then
		echo $ENTRY_DIR
		mkdir "$ENTRY_DIR" && echo_v "Created $ENTRY_DIR"
	fi	
}

create_entry_file() {
	# creates entry file if it doesn't exist
	if ! [ -e "$ENTRY_PATH" ]; then
		touch "$ENTRY_PATH" && echo_v "Created $ENTRY_PATH"
	fi
}

create_backup() {
	BACKUP_DIR="${ENTRY_DIR}/backup"
	if ! [ -d "${BACKUP_DIR}" ]; then
		mkdir "${BACKUP_DIR}" 
	fi
	BACKUP_FILE="shellnote_${DATE}.txt.gz"
	gzip < "${ENTRY_PATH}" > "${BACKUP_DIR}/${BACKUP_FILE}" 
	echo "Created backup file ${BACKUP_DIR}/${BACKUP_FILE}"
}

echo_v() {
  # prints message if verbose option set
  if [ "$VERBOSE" = true ]; then
    echo "$1" >&1
  fi
}

add_entry() {
	ENTRY="$DATETIME\t$OPTARG"
	printf '%b\n' "$ENTRY" >> "$ENTRY_PATH"
	echo_v "Added entry to $ENTRY_PATH."
}

print_entries() {
	if [ "$2" = true ]; then
		# print last N entries with spaces
		awk -F '\t' '{print $1" "$2"  "$3}' "$ENTRY_PATH" | tail -n "$1" | pr -td
	else
		# print last N entries
		awk -F '\t' '{print $1" "$2"  "$3}' "$ENTRY_PATH" | tail -n "$1" 
	fi
}

search_entries() {
	# search entry log file
	echo_v "Search result for \"$1\": "
	awk -v STR="$1" -F '\t' '{if ($3 ~ STR) print $1" "$2"  "$3;}' "$ENTRY_PATH"
}

del_entry() {
	# delete last line in entry log file
	LAST_ENTRY=$(tail -n 1 "$ENTRY_PATH" | awk -F '\t' '{print $3}')
	echo "Delete entry '$LAST_ENTRY'? (y/N) " 
	read -r ANS
	if [ "$ANS" = "${ANS#[Yy]}" ]; then
		echo_v "Not deleted."
		exit
	else
    	sed -i '$d' "$ENTRY_PATH"
		echo_v "Deleted."
	fi
}

# create entry dir and file if they don't exist
create_entry_dir
create_entry_file

# create timestamp
DATE=$(date +"$DATE_FORMAT")
TIME=$(date +"$TIME_FORMAT")
DATETIME="$DATE\t$TIME"

while getopts ":va:s:dehpb" OPT; do
	case $OPT in
		a)
		add_entry;;

		b)
		create_backup;;

		s)
		search_entries $OPTARG;;

		d)
		# delete last line in entry log file
		del_entry;;

		e)
		# edit entry log with text editor
		"$EDITOR_" "$ENTRY_PATH";;

		h)
		# print help and exit
		help; exit;;
		
		p)
		print_entries "$N_ENTRIES" "$ADD_SPACE";;

		\?)
		# print if unknown option supplied
		echo "Invalid option: -${OPTARG}"
		echo "Use -h to see available options."
		exit;;

		:)
		# print if no option arguments supplied
		echo "Option -${OPTARG} requires an argument."
		exit;;
	esac
done
exit
